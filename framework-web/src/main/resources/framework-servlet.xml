<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright (C) GridEdge Consulting LLC, 2016 All rights reserved. This 
	unpublished material is proprietary to GridEdge Consulting LLC. The methods 
	and techniques described herein are considered trade secrets and/or confidential. 
	Reproduction or distribution, in whole or in part, is forbidden. Written 
	by Yogesh Palrecha <ypalrecha@gridedge.com> -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
				http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/aop
				http://www.springframework.org/schema/aop/spring-aop.xsd
				http://www.springframework.org/schema/context
				http://www.springframework.org/schema/context/spring-context.xsd
				http://www.springframework.org/schema/jee
				http://www.springframework.org/schema/jee/spring-jee.xsd
				http://www.springframework.org/schema/lang
				http://www.springframework.org/schema/lang/spring-lang.xsd
				http://www.springframework.org/schema/tx
				http://www.springframework.org/schema/tx/spring-tx.xsd
				http://www.springframework.org/schema/util
				http://www.springframework.org/schema/util/spring-util.xsd
				http://www.springframework.org/schema/mvc
				http://www.springframework.org/schema/mvc/spring-mvc.xsd
				http://www.springframework.org/schema/data/mongo
				http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">

	<context:component-scan base-package="com.inferyx" />
	<!-- <mvc:resources mapping="/app/**" location="/app"/> -->
	
	<mvc:annotation-driven />
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- p:location="classpath://framework.properties"> -->
		<property name="locations">
			<list>
				<value>classpath://framework.properties</value>
				<value>classpath://log4j.properties</value>
			</list>
		</property>
	</bean>

	<bean id="mappingContext"
		class="org.springframework.data.mongodb.core.mapping.MongoMappingContext" />

	<bean id="defaultMongoTypeMapper"
		class="org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper">
		<constructor-arg name="typeKey">
			<null />
		</constructor-arg>
	</bean>

	<mongo:mongo-client id="mongoClient" host="${framework.mongo.host}"
		port="${framework.mongo.port}">
		<mongo:client-options connections-per-host="${framework.mongo.connectionsPerHost}"
			connect-timeout="${framework.mongo.connectTimeout}" max-wait-time="${framework.mongo.maxWaitTime}" />
	</mongo:mongo-client>

	<bean id="simpleMongoDbFactory"
		class="org.springframework.data.mongodb.core.SimpleMongoDbFactory">
		<constructor-arg ref="mongoClient" />
		<constructor-arg name="databaseName" value="${framework.mongo.database}" />
	</bean>

	<bean id="mappingMongoConverter"
		class="org.springframework.data.mongodb.core.convert.MappingMongoConverter">
		<constructor-arg name="mongoDbFactory" ref="simpleMongoDbFactory" />
		<constructor-arg name="mappingContext" ref="mappingContext" />
		<property name="typeMapper" ref="defaultMongoTypeMapper" />
	</bean>

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg ref="simpleMongoDbFactory" />
		<constructor-arg name="mongoConverter" ref="mappingMongoConverter" />
	</bean>
	<mongo:repositories base-package="com.inferyx.framework.dao"
		mongo-template-ref="mongoTemplate" />

	</beans>
