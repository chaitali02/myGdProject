DROP TABLE IF EXISTS ACCOUNT_POSTGRES;

CREATE TABLE ACCOUNT_POSTGRES
  ( 
     ACCOUNT_ID            VARCHAR(50) DEFAULT 0 NOT NULL,
     ACCOUNT_TYPE_ID       VARCHAR(50),
     ACCOUNT_STATUS_ID     VARCHAR(50),
     PRODUCT_TYPE_ID       VARCHAR(50),
     CUSTOMER_ID           VARCHAR(50),
     PIN_NUMBER            INTEGER,
     NATIONALITY           VARCHAR(50),
     PRIMARY_IDEN_DOC      VARCHAR(50),
     PRIMARY_IDEN_DOC_ID   VARCHAR(50),
     SECONDARY_IDEN_DOC    VARCHAR(50),
     SECONDARY_IDEN_DOC_ID VARCHAR(50),
     ACCOUNT_OPEN_DATE     VARCHAR(10),
     ACCOUNT_NUMBER        VARCHAR(50),
     OPENING_BALANCE       INTEGER,
     CURRENT_BALANCE       INTEGER,
     OVERDUE_BALANCE       INTEGER,
     OVERDUE_DATE          VARCHAR(10),
     CURRENCY_CODE         VARCHAR(10),
     INTEREST_TYPE         VARCHAR(10),
     INTEREST_RATE         DECIMAL(10,2),
     LOAD_DATE             VARCHAR(10),
     LOAD_ID               INTEGER,
     CONSTRAINT ACCOUNT_POSTGRES_PK PRIMARY KEY (ACCOUNT_ID) 
  );
DROP TABLE IF EXISTS ACCOUNT;

CREATE TABLE ACCOUNT
  ( 
     ACCOUNT_ID            VARCHAR(50) DEFAULT 0 NOT NULL,
     ACCOUNT_TYPE_ID       VARCHAR(50),
     ACCOUNT_STATUS_ID     VARCHAR(50),
     PRODUCT_TYPE_ID       VARCHAR(50),
     CUSTOMER_ID           VARCHAR(50),
     PIN_NUMBER            INTEGER,
     NATIONALITY           VARCHAR(50),
     PRIMARY_IDEN_DOC      VARCHAR(50),
     PRIMARY_IDEN_DOC_ID   VARCHAR(50),
     SECONDARY_IDEN_DOC    VARCHAR(50),
     SECONDARY_IDEN_DOC_ID VARCHAR(50),
     ACCOUNT_OPEN_DATE     VARCHAR(10),
     ACCOUNT_NUMBER        VARCHAR(50),
     OPENING_BALANCE       INTEGER,
     CURRENT_BALANCE       INTEGER,
     OVERDUE_BALANCE       INTEGER,
     OVERDUE_DATE          VARCHAR(10),
     CURRENCY_CODE         VARCHAR(10),
     INTEREST_TYPE         VARCHAR(10),
     INTEREST_RATE         DECIMAL(10,2),
     LOAD_DATE             VARCHAR(10),
     LOAD_ID               INTEGER,
     CONSTRAINT ACCOUNT_PK PRIMARY KEY (ACCOUNT_ID) 
  );
DROP TABLE IF EXISTS ACCOUNT_STATUS_TYPE; 

CREATE TABLE ACCOUNT_STATUS_TYPE 
  ( 
     ACCOUNT_STATUS_ID   VARCHAR(50) DEFAULT 0 NOT NULL,
     ACCOUNT_STATUS_CODE VARCHAR(10),
     ACCOUNT_STATUS_DESC VARCHAR(500),
     LOAD_DATE           VARCHAR(10),
     LOAD_ID             INTEGER,
     CONSTRAINT ACCOUNT_STATUS_ID_PK PRIMARY KEY(ACCOUNT_STATUS_ID) 
  );
DROP TABLE IF EXISTS ACCOUNT_TYPE; 

CREATE TABLE ACCOUNT_TYPE 
  ( 
     ACCOUNT_TYPE_ID   VARCHAR(50) DEFAULT 0 NOT NULL,
     ACCOUNT_TYPE_CODE VARCHAR(10),
     ACCOUNT_TYPE_DESC VARCHAR(500),
     LOAD_DATE         VARCHAR(10),
     LOAD_ID           INTEGER,
     CONSTRAINT ACCOUNT_TYPE_ID_PK PRIMARY KEY(ACCOUNT_TYPE_ID) 
  );
DROP TABLE IF EXISTS ADDRESS; 

CREATE TABLE ADDRESS 
  ( 
     ADDRESS_ID    VARCHAR(50) DEFAULT 0 NOT NULL,
     ADDRESS_LINE1 VARCHAR(50),
     ADDRESS_LINE2 VARCHAR(50),
     ADDRESS_LINE3 VARCHAR(50),
     CITY          VARCHAR(100),
     COUNTY        VARCHAR(100),
     STATE         VARCHAR(100),
     ZIPCODE       INTEGER,
     COUNTRY       VARCHAR(100),
     LATITUDE      VARCHAR(50),
     LONGITUDE     VARCHAR(50),
     LOAD_DATE     VARCHAR(10),
     LOAD_ID       INTEGER,
     CONSTRAINT ADDRESS_ID_PK PRIMARY KEY(ADDRESS_ID) 
  );
DROP TABLE IF EXISTS BANK; 

CREATE TABLE BANK 
  ( 
     BANK_ID             VARCHAR(50) DEFAULT 0 NOT NULL,
     BANK_CODE           VARCHAR(10),
     BANK_NAME           VARCHAR(100),
     BANK_ACCOUNT_NUMBER VARCHAR(50),
     BANK_CURRENCY_CODE  VARCHAR(10),
     BANK_CHECK_DIGITS   INTEGER,
     LOAD_DATE           VARCHAR(10),
     LOAD_ID             INTEGER,
     CONSTRAINT BANK_ID_PK PRIMARY KEY(BANK_ID) 
  );
DROP TABLE IF EXISTS BRANCH; 

CREATE TABLE BRANCH 
  ( 
     BRANCH_ID            VARCHAR(50) DEFAULT 0 NOT NULL,
     BRANCH_TYPE_ID       VARCHAR(50),
     BANK_ID              VARCHAR(50),
     ADDRESS_ID           VARCHAR(50),
     BRANCH_NAME          VARCHAR(100),
     BRANCH_DESC          VARCHAR(500),
     BRANCH_CONTACT_NAME  VARCHAR(100),
     BRANCH_CONTACT_PHONE VARCHAR(100),
     BRANCH_CONTACT_EMAIL VARCHAR(100),
     LOAD_DATE            VARCHAR(10),
     LOAD_ID              INTEGER,
     CONSTRAINT BRANCH_ID_PK PRIMARY KEY(BRANCH_ID) 
  );DROP TABLE IF EXISTS BRANCH_TYPE; 

CREATE TABLE BRANCH_TYPE 
  ( 
     BRANCH_TYPE_ID   VARCHAR(50) DEFAULT 0 NOT NULL,
     BRANCH_TYPE_CODE VARCHAR(10),
     BRANCH_TYPE_DESC VARCHAR(500),
     LOAD_DATE        VARCHAR(10),
     LOAD_ID          INTEGER,
     CONSTRAINT BRANCH_TYPE_ID_PK PRIMARY KEY(BRANCH_TYPE_ID) 
  ); 
DROP TABLE IF EXISTS CUSTOMER; 

CREATE TABLE CUSTOMER 
  ( 
     CUSTOMER_ID            VARCHAR(50) DEFAULT 0 NOT NULL,
     ADDRESS_ID             VARCHAR(50),
     BRANCH_ID              VARCHAR(50),
     TITLE                  VARCHAR(100),
     FIRST_NAME             VARCHAR(100),
     MIDDLE_NAME            VARCHAR(100),
     LAST_NAME              VARCHAR(100),
     SSN                    VARCHAR(100),
     PHONE                  VARCHAR(100),
     DATE_FIRST_PURCHASE    VARCHAR(10),
     COMMUTE_DISTANCE_MILES INTEGER,
     LOAD_DATE              VARCHAR(10),
     LOAD_ID                INTEGER,
     CONSTRAINT CUSTOMER_ID_PK PRIMARY KEY(CUSTOMER_ID) 
  );
DROP TABLE IF EXISTS DIM_ACCOUNT; 

CREATE TABLE DIM_ACCOUNT 
  ( 
     ACCOUNT_ID            VARCHAR(50) DEFAULT 0 NOT NULL,
     SRC_ACCOUNT_ID        VARCHAR(50),
     ACCOUNT_TYPE_CODE     VARCHAR(10),
     ACCOUNT_STATUS_CODE   VARCHAR(10),
     PRODUCT_TYPE_CODE     VARCHAR(10),
     PIN_NUMBER            INTEGER,
     NATIONALITY           VARCHAR(100),
     PRIMARY_IDEN_DOC      VARCHAR(100),
     PRIMARY_IDEN_DOC_ID   VARCHAR(50),
     SECONDARY_IDEN_DOC    VARCHAR(100),
     SECONDARY_IDEN_DOC_ID VARCHAR(50),
     ACCOUNT_OPEN_DATE     VARCHAR(10),
     ACCOUNT_NUMBER        VARCHAR(50),
     OPENING_BALANCE       INTEGER,
     CURRENT_BALANCE       INTEGER,
     OVERDUE_BALANCE       INTEGER,
     OVERDUE_DATE          VARCHAR(10),
     CURRENCY_CODE         VARCHAR(10),
     INTEREST_TYPE         VARCHAR(50),
     INTEREST_RATE         DECIMAL(10,2),
     LOAD_DATE             VARCHAR(10),
     LOAD_ID               INTEGER,
     CONSTRAINT ACCOUNT_ID_DIM_PK PRIMARY KEY(ACCOUNT_ID) 
  ); DROP TABLE IF EXISTS DIM_ADDRESS; 

CREATE TABLE DIM_ADDRESS 
  ( 
     ADDRESS_ID     VARCHAR(50) DEFAULT 0 NOT NULL,
     SRC_ADDRESS_ID VARCHAR(50),
     ADDRESS_LINE1  VARCHAR(50),
     ADDRESS_LINE2  VARCHAR(50),
     ADDRESS_LINE3  VARCHAR(50),
     CITY           VARCHAR(100),
     COUNTY         VARCHAR(100),
     STATE          VARCHAR(100),
     ZIPCODE        INTEGER,
     COUNTRY        VARCHAR(100),
     LATITUDE       VARCHAR(50),
     LONGTITUDE     VARCHAR(50),
     LOAD_DATE      VARCHAR(10),
     LOAD_ID        INTEGER,
     CONSTRAINT ADDRESS_ID_DIM__PK PRIMARY KEY(ADDRESS_ID) 
  );
DROP TABLE IF EXISTS DIM_BANK; 

CREATE TABLE DIM_BANK 
  ( 
     BANK_ID             VARCHAR(50) DEFAULT 0 NOT NULL,
     SRC_BANK_ID         VARCHAR(50),
     BANK_CODE           VARCHAR(10),
     BANK_NAME           VARCHAR(100),
     BANK_ACCOUNT_NUMBER VARCHAR(50),
     BANK_CURRENCY_CODE  VARCHAR(50),
     BANK_CHECK_DIGITS   INTEGER,
     LOAD_DATE           VARCHAR(10),
     LOAD_ID             INTEGER,
     CONSTRAINT BANK_ID_DIM__PK PRIMARY KEY(BANK_ID) 
  );
DROP TABLE IF EXISTS DIM_BRANCH; 

CREATE TABLE DIM_BRANCH 
  ( 
     BRANCH_ID            VARCHAR(50) DEFAULT 0 NOT NULL,
     SRC_BRANCH_ID        VARCHAR(50),
     BRANCH_TYPE_CODE     VARCHAR(10),
     BRANCH_NAME          VARCHAR(100),
     BRANCH_DESC          VARCHAR(500),
     BRANCH_CONTACT_NAME  VARCHAR(100),
     BRANCH_CONTACT_PHONE VARCHAR(100),
     BRANCH_CONTACT_EMAIL VARCHAR(100),
     LOAD_DATE            VARCHAR(10),
     LOAD_ID              INTEGER,
     CONSTRAINT BRANCH_ID_DIM__PK PRIMARY KEY(BRANCH_ID) 
  );DROP TABLE IF EXISTS DIM_COUNTRY; 

CREATE TABLE DIM_COUNTRY 
  ( 
     COUNTRY_ID         VARCHAR(50) DEFAULT 0 NOT NULL,
     COUNTRY_CODE       VARCHAR(10),
     COUNTRY_NAME       VARCHAR(100),
     COUNTRY_POPULATION INTEGER,
     LOAD_DATE          VARCHAR(10),
     LOAD_ID            INTEGER,
     CONSTRAINT COUNTRY_ID_DIM__PK PRIMARY KEY(COUNTRY_ID) 
  );
DROP TABLE IF EXISTS DIM_CUSTOMER; 

CREATE TABLE DIM_CUSTOMER 
  ( 
     CUSTOMER_ID         VARCHAR(50) DEFAULT 0 NOT NULL,
     SRC_CUSTOMER_ID     VARCHAR(50),
     TITLE               VARCHAR(100),
     FIRST_NAME          VARCHAR(100),
     MIDDLE_NAME         VARCHAR(100),
     LAST_NAME           VARCHAR(100),
     ADDRESS_LINE1       VARCHAR(50),
     ADDRESS_LINE2       VARCHAR(50),
     PHONE               VARCHAR(50),
     DATE_FIRST_PURCHASE VARCHAR(10),
     COMMUTE_DISTANCE    INTEGER,
     CITY                VARCHAR(100),
     STATE               VARCHAR(100),
     POSTAL_CODE         VARCHAR(10),
     COUNTRY             VARCHAR(100),
     LOAD_DATE           VARCHAR(10),
     LOAD_ID             INTEGER,
     CONSTRAINT CUSTOMER_ID_DIM__PK PRIMARY KEY(CUSTOMER_ID) 
  );DROP TABLE IF EXISTS DIM_DATE; 

CREATE TABLE DIM_DATE 
  ( 
     DATE_ID                        VARCHAR(50) DEFAULT 0 NOT NULL,
     DATE_TYPE                      VARCHAR(45),
     DATE_VAL                       VARCHAR(45),
     DAY_NUM_OF_WEEK                INTEGER,
     DAY_NUM_OF_MONTH               INTEGER,
     DAY_NUM_OF_QUARTER             INTEGER,
     DAY_NUM_OF_YEAR                INTEGER,
     DAY_NUM_ABSOLUTE               INTEGER,
     DAY_OF_WEEK_NAME               VARCHAR(100),
     DAY_OF_WEEK_ABBREVIATION       VARCHAR(45),
     JULIAN_DAY_NUM_OF_YEAR         INTEGER,
     JULIAN_DAY_NUM_ABSOLUTE        INTEGER,
     IS_WEEKDAY                     VARCHAR(50),
     IS_USA_CIVIL_HOLIDAY           VARCHAR(50),
     IS_LAST_DAY_OF_WEEK            VARCHAR(50),
     IS_LAST_DAY_OF_MONTH           VARCHAR(50),
     IS_LAST_DAY_OF_QUARTER         VARCHAR(50),
     IS_LAST_DAY_OF_YEAR            VARCHAR(50),
     IS_LAST_DAY_OF_FISCAL_MONTH    VARCHAR(50),
     IS_LAST_DAY_OF_FISCAL_QUARTER  VARCHAR(50),
     IS_LAST_DAY_OF_FISCAL_YEAR     VARCHAR(50),
     WEEK_OF_YEAR_BEGIN_DATE        VARCHAR(50),
     WEEK_OF_YEAR_BEGIN_DATE_KEY    INTEGER,
     WEEK_OF_YEAR_END_DATE          VARCHAR(50),
     WEEK_OF_YEAR_END_DATE_KEY      INTEGER,
     WEEK_OF_MONTH_BEGIN_DATE       VARCHAR(50),
     WEEK_OF_MONTH_BEGIN_DATE_KEY   INTEGER,
     WEEK_OF_MONTH_END_DATE         VARCHAR(50),
     WEEK_OF_MONTH_END_DATE_KEY     INTEGER,
     WEEK_OF_QUARTER_BEGIN_DATE     VARCHAR(50),
     WEEK_OF_QUARTER_BEGIN_DATE_KEY INTEGER,
     WEEK_OF_QUARTER_END_DATE       VARCHAR(50),
     WEEK_OF_QUARTER_END_DATE_KEY   INTEGER,
     WEEK_NUM_OF_MONTH              INTEGER,
     WEEK_NUM_OF_QUARTER            INTEGER,
     WEEK_NUM_OF_YEAR               INTEGER,
     MONTH_NUM_OF_YEAR              INTEGER,
     MONTH_NUM_OVERALL              VARCHAR(50),
     MONTH_NAME                     VARCHAR(100),
     MONTH_NAME_ABBREVIATION        VARCHAR(100),
     MONTH_BEGIN_DATE               VARCHAR(50),
     MONTH_BEGIN_DATE_KEY           INTEGER,
     MONTH_END_DATE                 VARCHAR(50),
     MONTH_END_DATE_KEY             INTEGER,
     QUARTER_NUM_OF_YEAR            INTEGER,
     QUARTER_NUM_OVERALL            INTEGER,
     QUARTER_BEGIN_DATE             VARCHAR(50),
     QUARTER_BEGIN_DATE_KEY         INTEGER,
     QUARTER_END_DATE               VARCHAR(50),
     QUARTER_END_DATE_KEY           INTEGER,
     YEAR_NUM                       INTEGER,
     YEAR_BEGIN_DATE                VARCHAR(50),
     YEAR_BEGIN_DATE_KEY            INTEGER,
     YEAR_END_DATE                  VARCHAR(50),
     YEAR_END_DATE_KEY              INTEGER,
     YYYY_MM                        VARCHAR(50),
     YYYY_MM_DD                     VARCHAR(50),
     DD_MON_YYYY                    VARCHAR(50),
     LOAD_DATE                      VARCHAR(50),
     LOAD_ID                        INTEGER,
     CONSTRAINT DATE_ID_DIM__PK PRIMARY KEY(DATE_ID) 
  );
DROP TABLE IF EXISTS DIM_STATE; 

CREATE TABLE DIM_STATE 
  ( 
     STATE_ID         VARCHAR(50) DEFAULT 0 NOT NULL,
     STATE_CODE       VARCHAR(10),
     STATE_NAME       VARCHAR(100),
     COUNTRY_CODE     VARCHAR(10),
     STATE_POPULATION INTEGER,
     LOAD_DATE        VARCHAR(10),
     LOAD_ID          INTEGER,
     CONSTRAINT STATE_ID_DIM__PK PRIMARY KEY(STATE_ID) 
  );DROP TABLE IF EXISTS DIM_TRANSACTION_TYPE; 

CREATE TABLE DIM_TRANSACTION_TYPE 
  ( 
     TRANSACTION_TYPE_ID     VARCHAR(50) DEFAULT 0 NOT NULL,
     SRC_TRANSACTION_TYPE_ID VARCHAR(50),
     TRANSACTION_TYPE_CODE   VARCHAR(10),
     TRANSACTION_TYPE_DESC   VARCHAR(500),
     LOAD_DATE               VARCHAR(10),
     LOAD_ID                 INTEGER,
     CONSTRAINT TRANSACTION_TYPE_ID_DIM__PK PRIMARY KEY(TRANSACTION_TYPE_ID) 
  );DROP TABLE IF EXISTS DP_RULE_RESULTS; 

CREATE TABLE DP_RULE_RESULTS 
  ( 
     DATAPODUUID    VARCHAR(50) DEFAULT 0 NOT NULL,
     DATAPODVERSION VARCHAR(50),
     DATAPODNAME    VARCHAR(100),
     ATTRIBUTEID    VARCHAR(50),
     ATTRIBUTENAME  VARCHAR(100),
     NUMROWS        VARCHAR(50),
     MINVAL         DECIMAL(10,2),
     MAXVAL         DECIMAL(10,2),
     AVGVAL         DECIMAL(10,3),
     MEDIANVAL      DECIMAL(10,3),
     STDDEV         DECIMAL(10,4),
     NUMDISTINCT    INTEGER,
     PERDISTINCT    DECIMAL(10,2),
     NUMNULL        INTEGER,
     PERNULL        DECIMAL(10,2),
     SIXSIGMA       DECIMAL(10,2),
     VERSION        INTEGER 
  );DROP TABLE IF EXISTS DQ_RULE_RESULTS; 

CREATE TABLE DQ_RULE_RESULTS 
  ( 
     ROWKEY                 VARCHAR(50),
     DATAPODUUID            VARCHAR(50),
     DATAPODVERSION         VARCHAR(50),
     DATAPODNAME            VARCHAR(100),
     ATTRIBUTEID            VARCHAR(50),
     ATTRIBUTENAME          VARCHAR(100),
     ATTRIBUTEVALUE         VARCHAR(50),
     NULLCHECK_PASS         VARCHAR(50),
     VALUECHECK_PASS        VARCHAR(50),
     RANGECHECK_PASS        VARCHAR(50),
     DATATYPECHECK_PASS     VARCHAR(50),
     DATAFORMATCHECK_PASS   VARCHAR(50),
     LENGTHCHECK_PASS       VARCHAR(50),
     REFINTEGRITYCHECK_PASS VARCHAR(50),
     DUPCHECK_PASS          VARCHAR(50),
     CUSTOMCHECK_PASS       VARCHAR(50),
     VERSION                INTEGER 
  );DROP TABLE IF EXISTS FACT_ACCOUNT_SUMMARY_MONTHLY; 

CREATE TABLE FACT_ACCOUNT_SUMMARY_MONTHLY 
  ( 
     ACCOUNT_ID             VARCHAR(50) DEFAULT 0 NOT NULL,
     YYYY_MM                VARCHAR(50) DEFAULT 0 NOT NULL,
     TOTAL_TRANS_COUNT      INTEGER,
     TOTAL_TRANS_AMOUNT_USD INTEGER,
     AVG_TRANS_AMOUNT       INTEGER,
     MIN_AMOUNT             DECIMAL(10,2),
     MAX_AMOUNT             INTEGER,
     LOAD_DATE              VARCHAR(10),
     LOAD_ID                INTEGER,
     CONSTRAINT ACCOUNT_ID_FACT_PK PRIMARY KEY(ACCOUNT_ID) 
  );
DROP TABLE IF EXISTS FACT_CUSTOMER_SUMMARY_MONTHLY; 

CREATE TABLE FACT_CUSTOMER_SUMMARY_MONTHLY 
  ( 
     CUSTOMER_ID            VARCHAR(50) DEFAULT 0 NOT NULL,
     YYYY_MM                VARCHAR(50) DEFAULT 0 NOT NULL,
     TOTAL_TRANS_COUNT      VARCHAR(50),
     TOTAL_TRANS_AMOUNT_USD INTEGER,
     AVG_TRANS_AMOUNT       INTEGER,
     MIN_AMOUNT             DECIMAL(10,2),
     MAX_AMOUNT             DECIMAL(10,2),
     LOAD_DATE              VARCHAR(10),
     LOAD_ID                INTEGER,
     CONSTRAINT CUSTOMER_ID_FACT_PK PRIMARY KEY(CUSTOMER_ID) 
  );DROP TABLE IF EXISTS FACT_TRANSACTION; 

CREATE TABLE FACT_TRANSACTION 
  ( 
     TRANSACTION_ID      VARCHAR(50) DEFAULT 0 NOT NULL,
     SRC_TRANSACTION_ID  VARCHAR(50),
     TRANSACTION_TYPE_ID INTEGER,
     TRANS_DATE_ID       INTEGER,
     BANK_ID             INTEGER,
     BRANCH_ID           INTEGER,
     CUSTOMER_ID         VARCHAR(50),
     ADDRESS_ID          VARCHAR(50),
     ACCOUNT_ID          VARCHAR(50),
     FROM_ACCOUNT        VARCHAR(50),
     TO_ACCOUNT          VARCHAR(50),
     AMOUNT_BASE_CURR    INTEGER,
     AMOUNT_USD          INTEGER,
     CURRENCY_CODE       VARCHAR(10),
     CURRENCY_RATE       INTEGER,
     NOTES               VARCHAR(50),
     LOAD_DATE           VARCHAR(10),
     LOAD_ID             INTEGER,
     CONSTRAINT TRANSACTION_ID_FACT_PK PRIMARY KEY(TRANSACTION_ID) 
  );DROP TABLE IF EXISTS MODEL_TRAINING_SET; 
CREATE TABLE MODEL_TRAINING_SET
(
  CUSTOMER_ID INTEGER NOT NULL,
  ADDRESS_ID INTEGER NOT NULL,
  BRANCH_ID INTEGER NOT NULL,
  COMMUTE_DISTANCE_MILES INTEGER NOT NULL,
  LABEL INTEGER NOT NULL,
  CENSOR INTEGER NOT NULL,
  VERSION INTEGER NOT NULL
);

DROP TABLE IF EXISTS PRODUCT_TYPE; 

CREATE TABLE  PRODUCT_TYPE 
  ( 
     PRODUCT_TYPE_ID   VARCHAR(50) DEFAULT 0 NOT NULL,
     PRODUCT_TYPE_CODE VARCHAR(10),
     PRODUCT_TYPE_DESC VARCHAR(500),
     LOAD_DATE         VARCHAR(10),
     LOAD_ID           INTEGER,
     CONSTRAINT LOAD_ID_PK PRIMARY KEY(PRODUCT_TYPE_ID) 
  );DROP TABLE IF EXISTS RC_RULE_RESULTS; 

CREATE TABLE RC_RULE_RESULTS 
  ( 
     SOURCEUUID          VARCHAR(50) DEFAULT 0 NOT NULL,
     SOURCEVERSION       VARCHAR(50),
     SOURCENAME          VARCHAR(100),
     SOURCEATTRIBUTEID   VARCHAR(50),
     SOURCEATTRIBUTENAME VARCHAR(100),
     SOURCEVALUE         DECIMAL(10,2),
     TARGETUUID          VARCHAR(50) DEFAULT 0 NOT NULL,
     TARGETVERSION       VARCHAR(50),
     TARGETNAME          VARCHAR(100),
     TARGETATTRIBUTEID   VARCHAR(50),
     TARGETATTRIBUTENAME VARCHAR(100),
     TARGETVALUE         DECIMAL(10,2),
     STATUS              VARCHAR(50),
     VERSION             INTEGER 
  );DROP TABLE IF EXISTS TARGET_GEN_DATA_UNIFORM_DIST;
CREATE TABLE TARGET_GEN_DATA_UNIFORM_DIST
(
  ID INTEGER NOT NULL,
  COL1 DOUBLE PRECISION,
  VERSION INTEGER NOT NULL
);

DROP TABLE IF EXISTS TARGET_SIM_LINEAR_REGRESSION;
CREATE TABLE TARGET_SIM_LINEAR_REGRESSION (
  ID INTEGER NOT NULL,
  VERSION INTEGER NOT NULL,
  INTEREST_RATE DOUBLE PRECISION,
  ACCOUNT_TYPE_ID DOUBLE PRECISION,
  ACCOUNT_STATUS_ID DOUBLE PRECISION
);
DROP TABLE IF EXISTS TARGET_SIM_MULTIVARIENT_NORMAL_DIS;
CREATE TABLE TARGET_SIM_MULTIVARIENT_NORMAL_DIS (
  ID INTEGER NOT NULL,
  INTERESTRATE DOUBLE PRECISION,
  COL2 DOUBLE PRECISION,
  COL3 DOUBLE PRECISION,
  VERSION INTEGER NOT NULL  
);
DROP TABLE IF EXISTS TRANSACTION; 

CREATE TABLE  TRANSACTION 
  ( 
     TRANSACTION_ID      VARCHAR(50) DEFAULT 0 NOT NULL,
     TRANSACTION_TYPE_ID VARCHAR(50),
     ACCOUNT_ID          VARCHAR(50),
     TRANSACTION_DATE    VARCHAR(10),
     FROM_ACCOUNT        VARCHAR(50),
     TO_ACCOUNT          VARCHAR(50),
     AMOUNT_BASE_CURR    DECIMAL(10,2),
     AMOUNT_USD          DECIMAL(10,2),
     CURRENCY_CODE       VARCHAR(10),
     CURRENCY_RATE       DECIMAL(10,2),
     NOTES               VARCHAR(100),
     LOAD_DATE           VARCHAR(10),
     LOAD_ID             INTEGER,
     CONSTRAINT TRANSACTION_ID_PK PRIMARY KEY(TRANSACTION_ID) 
  ); DROP TABLE IF EXISTS TRANSACTION_TYPE; 

CREATE TABLE TRANSACTION_TYPE 
  ( 
     TRANSACTION_TYPE_ID   VARCHAR(50) DEFAULT 0 NOT NULL,
     TRANSACTION_TYPE_CODE VARCHAR(10),
     TRANSACTION_TYPE_DESC VARCHAR(500),
     LOAD_DATE             VARCHAR(10),
     LOAD_ID               INTEGER,
     CONSTRAINT TRANSACTION_TYPE_ID_PK PRIMARY KEY(TRANSACTION_TYPE_ID) 
  ); 